<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="1" total="43" passed="42" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-07-07T11:06:31 IST" name="API Automation Test Suite" finished-at="2025-07-07T11:07:29 IST" duration-ms="58251">
    <groups>
      <group name="security">
        <method signature="AuthTokenNegativeTests.testInvalidToken_ShouldReturn401()[pri:0, instance:com.api.tests.security.AuthTokenNegativeTests@6b5176f2]" name="testInvalidToken_ShouldReturn401" class="com.api.tests.security.AuthTokenNegativeTests"/>
        <method signature="AuthTokenNegativeTests.testMissingToken_ShouldReturn401()[pri:0, instance:com.api.tests.security.AuthTokenNegativeTests@6b5176f2]" name="testMissingToken_ShouldReturn401" class="com.api.tests.security.AuthTokenNegativeTests"/>
      </group> <!-- security -->
      <group name="negative">
        <method signature="CreateCommentTests.testCreateComment_InvalidEmail_ShouldReturn422()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" name="testCreateComment_InvalidEmail_ShouldReturn422" class="com.api.tests.CreateCommentTests"/>
        <method signature="CreateCommentTests.testCreateComment_InvalidPostId_ShouldReturn422()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" name="testCreateComment_InvalidPostId_ShouldReturn422" class="com.api.tests.CreateCommentTests"/>
        <method signature="CreateCommentTests.testCreateComment_MissingBody_ShouldReturn422()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" name="testCreateComment_MissingBody_ShouldReturn422" class="com.api.tests.CreateCommentTests"/>
        <method signature="CreateCommentTests.testCreateComment_MissingEmail_ShouldReturn422()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" name="testCreateComment_MissingEmail_ShouldReturn422" class="com.api.tests.CreateCommentTests"/>
        <method signature="CreateCommentTests.testCreateComment_MissingName_ShouldReturn422()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" name="testCreateComment_MissingName_ShouldReturn422" class="com.api.tests.CreateCommentTests"/>
        <method signature="CreateUserTests.testCreateUser_InvalidData_ShouldFail(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" name="testCreateUser_InvalidData_ShouldFail" class="com.api.tests.CreateUserTests"/>
        <method signature="DeleteUserTests.testDeleteUser_InvalidId_ShouldReturn404()[pri:0, instance:com.api.tests.DeleteUserTests@533b266e]" name="testDeleteUser_InvalidId_ShouldReturn404" class="com.api.tests.DeleteUserTests"/>
        <method signature="DeleteUserTests.testDeleteUser_Twice_ShouldReturn404OnSecondAttempt()[pri:0, instance:com.api.tests.DeleteUserTests@533b266e]" name="testDeleteUser_Twice_ShouldReturn404OnSecondAttempt" class="com.api.tests.DeleteUserTests"/>
        <method signature="UpdatePostTests.testUpdatePostWithEmptyPayload_ShouldReturn422()[pri:0, instance:com.api.tests.UpdatePostTests@6865c751]" name="testUpdatePostWithEmptyPayload_ShouldReturn422" class="com.api.tests.UpdatePostTests"/>
        <method signature="UpdatePostTests.testUpdatePostWithInvalidId_ShouldReturn404()[pri:0, instance:com.api.tests.UpdatePostTests@6865c751]" name="testUpdatePostWithInvalidId_ShouldReturn404" class="com.api.tests.UpdatePostTests"/>
        <method signature="UpdatePostTests.testUpdatePostWithoutAuthToken_ShouldReturn401or404()[pri:0, instance:com.api.tests.UpdatePostTests@6865c751]" name="testUpdatePostWithoutAuthToken_ShouldReturn401or404" class="com.api.tests.UpdatePostTests"/>
        <method signature="UpdateUserTests.testUpdateUser_InvalidEmail_ShouldReturn422()[pri:0, instance:com.api.tests.UpdateUserTests@5fcacc0]" name="testUpdateUser_InvalidEmail_ShouldReturn422" class="com.api.tests.UpdateUserTests"/>
        <method signature="UpdateUserTests.testUpdateUser_InvalidId_ShouldReturn404()[pri:0, instance:com.api.tests.UpdateUserTests@5fcacc0]" name="testUpdateUser_InvalidId_ShouldReturn404" class="com.api.tests.UpdateUserTests"/>
      </group> <!-- negative -->
      <group name="positive">
        <method signature="CreateCommentTests.testCreateComment_ShouldSucceed()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" name="testCreateComment_ShouldSucceed" class="com.api.tests.CreateCommentTests"/>
        <method signature="CreateUserTests.testCreateUser_ValidData_ShouldSucceed()[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" name="testCreateUser_ValidData_ShouldSucceed" class="com.api.tests.CreateUserTests"/>
        <method signature="DeleteUserTests.testDeleteUser_ValidId_ShouldSucceed()[pri:0, instance:com.api.tests.DeleteUserTests@533b266e]" name="testDeleteUser_ValidId_ShouldSucceed" class="com.api.tests.DeleteUserTests"/>
        <method signature="UpdatePostTests.testUpdatePost_ShouldSucceed()[pri:0, instance:com.api.tests.UpdatePostTests@6865c751]" name="testUpdatePost_ShouldSucceed" class="com.api.tests.UpdatePostTests"/>
        <method signature="UpdateUserTests.testUpdateUser_ValidData_ShouldSucceed()[pri:0, instance:com.api.tests.UpdateUserTests@5fcacc0]" name="testUpdateUser_ValidData_ShouldSucceed" class="com.api.tests.UpdateUserTests"/>
      </group> <!-- positive -->
    </groups>
    <test started-at="2025-07-07T11:06:31 IST" name="🔍 All CRUD API Tests (Create + Get + Update + Delete)" finished-at="2025-07-07T11:07:28 IST" duration-ms="57078">
      <class name="com.api.tests.DeletePostTests">
        <test-method is-config="true" signature="setup()[pri:0, instance:com.api.tests.DeletePostTests@1d71006f]" started-at="2025-07-07T11:07:03 IST" name="setup" finished-at="2025-07-07T11:07:05 IST" duration-ms="1407" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.DeletePostTests@1d71006f]" started-at="2025-07-07T11:07:05 IST" name="logTestStart" finished-at="2025-07-07T11:07:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.DeletePostTests.testDeletePostWithInvalidId_ShouldReturn404()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testDeletePostWithInvalidId_ShouldReturn404()[pri:0, instance:com.api.tests.DeletePostTests@1d71006f]" started-at="2025-07-07T11:07:05 IST" name="testDeletePostWithInvalidId_ShouldReturn404" description="🔴 Delete post with invalid ID should return 404" finished-at="2025-07-07T11:07:05 IST" duration-ms="562" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeletePostWithInvalidId_ShouldReturn404 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.DeletePostTests@1d71006f]" started-at="2025-07-07T11:07:05 IST" name="logTestResult" finished-at="2025-07-07T11:07:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testDeletePostWithInvalidId_ShouldReturn404 status=SUCCESS method=DeletePostTests.testDeletePostWithInvalidId_ShouldReturn404()[pri:0, instance:com.api.tests.DeletePostTests@1d71006f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method signature="testDeletePostWithoutAuthToken_ShouldReturnUnauthorizedOrNotFound()[pri:0, instance:com.api.tests.DeletePostTests@1d71006f]" started-at="2025-07-07T11:07:05 IST" name="testDeletePostWithoutAuthToken_ShouldReturnUnauthorizedOrNotFound" description="🔴 Delete post without authorization token should return 401 or 404" finished-at="2025-07-07T11:07:07 IST" duration-ms="1899" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeletePostWithoutAuthToken_ShouldReturnUnauthorizedOrNotFound -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.DeletePostTests@1d71006f]" started-at="2025-07-07T11:07:05 IST" name="logTestStart" finished-at="2025-07-07T11:07:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.DeletePostTests.testDeletePostWithoutAuthToken_ShouldReturnUnauthorizedOrNotFound()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.DeletePostTests@1d71006f]" started-at="2025-07-07T11:07:07 IST" name="logTestResult" finished-at="2025-07-07T11:07:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testDeletePostWithoutAuthToken_ShouldReturnUnauthorizedOrNotFound status=SUCCESS method=DeletePostTests.testDeletePostWithoutAuthToken_ShouldReturnUnauthorizedOrNotFound()[pri:0, instance:com.api.tests.DeletePostTests@1d71006f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.DeletePostTests@1d71006f]" started-at="2025-07-07T11:07:07 IST" name="logTestStart" finished-at="2025-07-07T11:07:07 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.DeletePostTests.testDeletePost_ShouldSucceed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testDeletePost_ShouldSucceed()[pri:0, instance:com.api.tests.DeletePostTests@1d71006f]" started-at="2025-07-07T11:07:07 IST" name="testDeletePost_ShouldSucceed" description="🟢 Delete a post by ID" finished-at="2025-07-07T11:07:08 IST" duration-ms="571" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeletePost_ShouldSucceed -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.DeletePostTests@1d71006f]" started-at="2025-07-07T11:07:08 IST" name="logTestResult" finished-at="2025-07-07T11:07:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testDeletePost_ShouldSucceed status=SUCCESS method=DeletePostTests.testDeletePost_ShouldSucceed()[pri:0, instance:com.api.tests.DeletePostTests@1d71006f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.DeletePostTests@1d71006f]" started-at="2025-07-07T11:07:08 IST" name="logTestStart" finished-at="2025-07-07T11:07:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.DeletePostTests.testDeletePostTwice_ShouldReturn404()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testDeletePostTwice_ShouldReturn404()[pri:0, instance:com.api.tests.DeletePostTests@1d71006f]" started-at="2025-07-07T11:07:08 IST" name="testDeletePostTwice_ShouldReturn404" description="🔴 Deleting same post again should return 404" finished-at="2025-07-07T11:07:09 IST" depends-on-methods="com.api.tests.DeletePostTests.testDeletePost_ShouldSucceed" duration-ms="786" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeletePostTwice_ShouldReturn404 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.DeletePostTests@1d71006f]" started-at="2025-07-07T11:07:09 IST" name="logTestResult" finished-at="2025-07-07T11:07:09 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testDeletePostTwice_ShouldReturn404 status=SUCCESS method=DeletePostTests.testDeletePostTwice_ShouldReturn404()[pri:0, instance:com.api.tests.DeletePostTests@1d71006f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method signature="testGetDeletedPost_ShouldReturn404()[pri:0, instance:com.api.tests.DeletePostTests@1d71006f]" started-at="2025-07-07T11:07:09 IST" name="testGetDeletedPost_ShouldReturn404" description="🔴 Get deleted post should return 404" finished-at="2025-07-07T11:07:09 IST" depends-on-methods="com.api.tests.DeletePostTests.testDeletePost_ShouldSucceed" duration-ms="533" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetDeletedPost_ShouldReturn404 -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.DeletePostTests@1d71006f]" started-at="2025-07-07T11:07:09 IST" name="logTestStart" finished-at="2025-07-07T11:07:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.DeletePostTests.testGetDeletedPost_ShouldReturn404()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.DeletePostTests@1d71006f]" started-at="2025-07-07T11:07:09 IST" name="logTestResult" finished-at="2025-07-07T11:07:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetDeletedPost_ShouldReturn404 status=SUCCESS method=DeletePostTests.testGetDeletedPost_ShouldReturn404()[pri:0, instance:com.api.tests.DeletePostTests@1d71006f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
      </class> <!-- com.api.tests.DeletePostTests -->
      <class name="com.api.tests.UpdateUserTests">
        <test-method is-config="true" signature="setup()[pri:0, instance:com.api.tests.UpdateUserTests@5fcacc0]" started-at="2025-07-07T11:06:40 IST" name="setup" finished-at="2025-07-07T11:06:40 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.UpdateUserTests@5fcacc0]" started-at="2025-07-07T11:06:40 IST" name="logTestStart" finished-at="2025-07-07T11:06:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.UpdateUserTests.testUpdateUser_InvalidEmail_ShouldReturn422()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testUpdateUser_InvalidEmail_ShouldReturn422()[pri:0, instance:com.api.tests.UpdateUserTests@5fcacc0]" started-at="2025-07-07T11:06:40 IST" name="testUpdateUser_InvalidEmail_ShouldReturn422" description="🔴 Update user with invalid email format" finished-at="2025-07-07T11:06:42 IST" duration-ms="1593" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateUser_InvalidEmail_ShouldReturn422 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.UpdateUserTests@5fcacc0]" started-at="2025-07-07T11:06:42 IST" name="logTestResult" finished-at="2025-07-07T11:06:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testUpdateUser_InvalidEmail_ShouldReturn422 status=SUCCESS method=UpdateUserTests.testUpdateUser_InvalidEmail_ShouldReturn422()[pri:0, instance:com.api.tests.UpdateUserTests@5fcacc0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.UpdateUserTests@5fcacc0]" started-at="2025-07-07T11:06:42 IST" name="logTestStart" finished-at="2025-07-07T11:06:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.UpdateUserTests.testUpdateUser_InvalidId_ShouldReturn404()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testUpdateUser_InvalidId_ShouldReturn404()[pri:0, instance:com.api.tests.UpdateUserTests@5fcacc0]" started-at="2025-07-07T11:06:42 IST" name="testUpdateUser_InvalidId_ShouldReturn404" description="🔴 Update user with invalid ID" finished-at="2025-07-07T11:06:43 IST" duration-ms="735" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateUser_InvalidId_ShouldReturn404 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.UpdateUserTests@5fcacc0]" started-at="2025-07-07T11:06:43 IST" name="logTestResult" finished-at="2025-07-07T11:06:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testUpdateUser_InvalidId_ShouldReturn404 status=SUCCESS method=UpdateUserTests.testUpdateUser_InvalidId_ShouldReturn404()[pri:0, instance:com.api.tests.UpdateUserTests@5fcacc0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.UpdateUserTests@5fcacc0]" started-at="2025-07-07T11:06:43 IST" name="logTestStart" finished-at="2025-07-07T11:06:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.UpdateUserTests.testUpdateUser_ValidData_ShouldSucceed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testUpdateUser_ValidData_ShouldSucceed()[pri:0, instance:com.api.tests.UpdateUserTests@5fcacc0]" started-at="2025-07-07T11:06:43 IST" name="testUpdateUser_ValidData_ShouldSucceed" description="🟢 Update user with valid data" finished-at="2025-07-07T11:06:47 IST" duration-ms="4012" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateUser_ValidData_ShouldSucceed -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.UpdateUserTests@5fcacc0]" started-at="2025-07-07T11:06:47 IST" name="logTestResult" finished-at="2025-07-07T11:06:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testUpdateUser_ValidData_ShouldSucceed status=SUCCESS method=UpdateUserTests.testUpdateUser_ValidData_ShouldSucceed()[pri:0, instance:com.api.tests.UpdateUserTests@5fcacc0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
      </class> <!-- com.api.tests.UpdateUserTests -->
      <class name="com.api.tests.CreatePostTests">
        <test-method is-config="true" signature="setup()[pri:0, instance:com.api.tests.CreatePostTests@6d1d4d7]" started-at="2025-07-07T11:06:53 IST" name="setup" finished-at="2025-07-07T11:06:54 IST" duration-ms="886" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CreatePostTests@6d1d4d7]" started-at="2025-07-07T11:06:54 IST" name="logTestStart" finished-at="2025-07-07T11:06:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CreatePostTests.testCreatePost_ShouldSucceed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testCreatePost_ShouldSucceed()[pri:0, instance:com.api.tests.CreatePostTests@6d1d4d7]" started-at="2025-07-07T11:06:54 IST" name="testCreatePost_ShouldSucceed" description="🟢 Create post for a valid user" finished-at="2025-07-07T11:06:55 IST" duration-ms="759" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreatePost_ShouldSucceed -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.CreatePostTests@6d1d4d7]" started-at="2025-07-07T11:06:55 IST" name="logTestResult" finished-at="2025-07-07T11:06:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCreatePost_ShouldSucceed status=SUCCESS method=CreatePostTests.testCreatePost_ShouldSucceed()[pri:0, instance:com.api.tests.CreatePostTests@6d1d4d7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
      </class> <!-- com.api.tests.CreatePostTests -->
      <class name="com.api.tests.CreateUserTests">
        <test-method is-config="true" signature="setup()[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:31 IST" name="setup" finished-at="2025-07-07T11:06:32 IST" duration-ms="494" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:32 IST" name="logTestStart" finished-at="2025-07-07T11:06:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CreateUserTests.testCreateUser_InvalidData_ShouldFail(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testCreateUser_InvalidData_ShouldFail(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:32 IST" name="testCreateUser_InvalidData_ShouldFail" data-provider="invalidUserData" finished-at="2025-07-07T11:06:34 IST" duration-ms="1838" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[missing-name@hotmail.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[male]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[active]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Missing name]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateUser_InvalidData_ShouldFail -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:34 IST" name="logTestResult" finished-at="2025-07-07T11:06:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCreateUser_InvalidData_ShouldFail status=SUCCESS method=CreateUserTests.testCreateUser_InvalidData_ShouldFail(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:34 IST" name="logTestStart" finished-at="2025-07-07T11:06:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CreateUserTests.testCreateUser_InvalidData_ShouldFail(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testCreateUser_InvalidData_ShouldFail(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:34 IST" name="testCreateUser_InvalidData_ShouldFail" data-provider="invalidUserData" finished-at="2025-07-07T11:06:34 IST" duration-ms="673" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test User]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[female]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[active]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Missing email]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateUser_InvalidData_ShouldFail -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:34 IST" name="logTestResult" finished-at="2025-07-07T11:06:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCreateUser_InvalidData_ShouldFail status=SUCCESS method=CreateUserTests.testCreateUser_InvalidData_ShouldFail(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:34 IST" name="logTestStart" finished-at="2025-07-07T11:06:34 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CreateUserTests.testCreateUser_InvalidData_ShouldFail(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testCreateUser_InvalidData_ShouldFail(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:34 IST" name="testCreateUser_InvalidData_ShouldFail" data-provider="invalidUserData" finished-at="2025-07-07T11:06:35 IST" duration-ms="622" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test User]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[not-an-email]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[female]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[active]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Invalid email format]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateUser_InvalidData_ShouldFail -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:35 IST" name="logTestResult" finished-at="2025-07-07T11:06:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCreateUser_InvalidData_ShouldFail status=SUCCESS method=CreateUserTests.testCreateUser_InvalidData_ShouldFail(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:35 IST" name="logTestStart" finished-at="2025-07-07T11:06:35 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CreateUserTests.testCreateUser_InvalidData_ShouldFail(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testCreateUser_InvalidData_ShouldFail(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:35 IST" name="testCreateUser_InvalidData_ShouldFail" data-provider="invalidUserData" finished-at="2025-07-07T11:06:36 IST" duration-ms="559" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test User]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[bad-gender@gmail.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[unknown]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[active]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Invalid gender]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateUser_InvalidData_ShouldFail -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:36 IST" name="logTestResult" finished-at="2025-07-07T11:06:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCreateUser_InvalidData_ShouldFail status=SUCCESS method=CreateUserTests.testCreateUser_InvalidData_ShouldFail(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:36 IST" name="logTestStart" finished-at="2025-07-07T11:06:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CreateUserTests.testCreateUser_InvalidData_ShouldFail(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testCreateUser_InvalidData_ShouldFail(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:36 IST" name="testCreateUser_InvalidData_ShouldFail" data-provider="invalidUserData" finished-at="2025-07-07T11:06:37 IST" duration-ms="889" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test User]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[bad-status@gmail.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[male]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[running]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Invalid status]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateUser_InvalidData_ShouldFail -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:37 IST" name="logTestResult" finished-at="2025-07-07T11:06:37 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCreateUser_InvalidData_ShouldFail status=SUCCESS method=CreateUserTests.testCreateUser_InvalidData_ShouldFail(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:37 IST" name="logTestStart" finished-at="2025-07-07T11:06:37 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CreateUserTests.testCreateUser_ValidData_ShouldSucceed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testCreateUser_ValidData_ShouldSucceed()[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:37 IST" name="testCreateUser_ValidData_ShouldSucceed" description="🟢 Create user with valid data" finished-at="2025-07-07T11:06:37 IST" duration-ms="770" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateUser_ValidData_ShouldSucceed -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.CreateUserTests@60fa3495]" started-at="2025-07-07T11:06:37 IST" name="logTestResult" finished-at="2025-07-07T11:06:37 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCreateUser_ValidData_ShouldSucceed status=SUCCESS method=CreateUserTests.testCreateUser_ValidData_ShouldSucceed()[pri:0, instance:com.api.tests.CreateUserTests@60fa3495] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
      </class> <!-- com.api.tests.CreateUserTests -->
      <class name="com.api.tests.GetPostTests">
        <test-method is-config="true" signature="setup()[pri:0, instance:com.api.tests.GetPostTests@89ff02e]" started-at="2025-07-07T11:06:55 IST" name="setup" finished-at="2025-07-07T11:06:57 IST" duration-ms="1684" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GetPostTests@89ff02e]" started-at="2025-07-07T11:06:57 IST" name="logTestStart" finished-at="2025-07-07T11:06:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GetPostTests.testGetAllPosts_ShouldReturnList()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testGetAllPosts_ShouldReturnList()[pri:0, instance:com.api.tests.GetPostTests@89ff02e]" started-at="2025-07-07T11:06:57 IST" name="testGetAllPosts_ShouldReturnList" description="🟢 Get all posts" finished-at="2025-07-07T11:06:58 IST" duration-ms="835" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllPosts_ShouldReturnList -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.GetPostTests@89ff02e]" started-at="2025-07-07T11:06:58 IST" name="logTestResult" finished-at="2025-07-07T11:06:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetAllPosts_ShouldReturnList status=SUCCESS method=GetPostTests.testGetAllPosts_ShouldReturnList()[pri:0, instance:com.api.tests.GetPostTests@89ff02e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GetPostTests@89ff02e]" started-at="2025-07-07T11:06:58 IST" name="logTestStart" finished-at="2025-07-07T11:06:58 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GetPostTests.testGetPostById_ShouldReturnCorrectPost()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testGetPostById_ShouldReturnCorrectPost()[pri:0, instance:com.api.tests.GetPostTests@89ff02e]" started-at="2025-07-07T11:06:58 IST" name="testGetPostById_ShouldReturnCorrectPost" description="🟢 Get post by ID" finished-at="2025-07-07T11:06:58 IST" duration-ms="544" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPostById_ShouldReturnCorrectPost -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.GetPostTests@89ff02e]" started-at="2025-07-07T11:06:58 IST" name="logTestResult" finished-at="2025-07-07T11:06:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPostById_ShouldReturnCorrectPost status=SUCCESS method=GetPostTests.testGetPostById_ShouldReturnCorrectPost()[pri:0, instance:com.api.tests.GetPostTests@89ff02e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GetPostTests@89ff02e]" started-at="2025-07-07T11:06:58 IST" name="logTestStart" finished-at="2025-07-07T11:06:58 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GetPostTests.testGetPostByInvalidId_ShouldReturn404()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testGetPostByInvalidId_ShouldReturn404()[pri:0, instance:com.api.tests.GetPostTests@89ff02e]" started-at="2025-07-07T11:06:58 IST" name="testGetPostByInvalidId_ShouldReturn404" description="🔴 Get non-existent post should return 404" finished-at="2025-07-07T11:06:59 IST" duration-ms="677" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPostByInvalidId_ShouldReturn404 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.GetPostTests@89ff02e]" started-at="2025-07-07T11:06:59 IST" name="logTestResult" finished-at="2025-07-07T11:06:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPostByInvalidId_ShouldReturn404 status=SUCCESS method=GetPostTests.testGetPostByInvalidId_ShouldReturn404()[pri:0, instance:com.api.tests.GetPostTests@89ff02e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
      </class> <!-- com.api.tests.GetPostTests -->
      <class name="com.api.tests.DeleteCommentTests">
        <test-method is-config="true" signature="setup()[pri:0, instance:com.api.tests.DeleteCommentTests@3ebff828]" started-at="2025-07-07T11:07:23 IST" name="setup" finished-at="2025-07-07T11:07:26 IST" duration-ms="3373" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.DeleteCommentTests@3ebff828]" started-at="2025-07-07T11:07:26 IST" name="logTestStart" finished-at="2025-07-07T11:07:26 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.DeleteCommentTests.testDeleteComment_ShouldReturn204()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testDeleteComment_ShouldReturn204()[pri:0, instance:com.api.tests.DeleteCommentTests@3ebff828]" started-at="2025-07-07T11:07:26 IST" name="testDeleteComment_ShouldReturn204" description="🟢 Delete comment by ID" finished-at="2025-07-07T11:07:27 IST" duration-ms="936" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeleteComment_ShouldReturn204 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.DeleteCommentTests@3ebff828]" started-at="2025-07-07T11:07:27 IST" name="logTestResult" finished-at="2025-07-07T11:07:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testDeleteComment_ShouldReturn204 status=SUCCESS method=DeleteCommentTests.testDeleteComment_ShouldReturn204()[pri:0, instance:com.api.tests.DeleteCommentTests@3ebff828] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method signature="testDeleteCommentAgain_ShouldReturn404()[pri:0, instance:com.api.tests.DeleteCommentTests@3ebff828]" started-at="2025-07-07T11:07:27 IST" name="testDeleteCommentAgain_ShouldReturn404" description="🔴 Deleting already deleted comment should return 404" finished-at="2025-07-07T11:07:28 IST" depends-on-methods="com.api.tests.DeleteCommentTests.testDeleteComment_ShouldReturn204" duration-ms="887" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeleteCommentAgain_ShouldReturn404 -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.DeleteCommentTests@3ebff828]" started-at="2025-07-07T11:07:27 IST" name="logTestStart" finished-at="2025-07-07T11:07:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.DeleteCommentTests.testDeleteCommentAgain_ShouldReturn404()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.DeleteCommentTests@3ebff828]" started-at="2025-07-07T11:07:28 IST" name="logTestResult" finished-at="2025-07-07T11:07:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testDeleteCommentAgain_ShouldReturn404 status=SUCCESS method=DeleteCommentTests.testDeleteCommentAgain_ShouldReturn404()[pri:0, instance:com.api.tests.DeleteCommentTests@3ebff828] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
      </class> <!-- com.api.tests.DeleteCommentTests -->
      <class name="com.api.tests.GetUserTests">
        <test-method is-config="true" signature="setup()[pri:0, instance:com.api.tests.GetUserTests@1ca25c47]" started-at="2025-07-07T11:06:37 IST" name="setup" finished-at="2025-07-07T11:06:38 IST" duration-ms="1068" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GetUserTests@1ca25c47]" started-at="2025-07-07T11:06:38 IST" name="logTestStart" finished-at="2025-07-07T11:06:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GetUserTests.testGetAllUsers_ShouldReturnUserList()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testGetAllUsers_ShouldReturnUserList()[pri:0, instance:com.api.tests.GetUserTests@1ca25c47]" started-at="2025-07-07T11:06:38 IST" name="testGetAllUsers_ShouldReturnUserList" description="🟢 Fetch all users - Should return 200 and at least one user" finished-at="2025-07-07T11:06:39 IST" duration-ms="639" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllUsers_ShouldReturnUserList -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.GetUserTests@1ca25c47]" started-at="2025-07-07T11:06:39 IST" name="logTestResult" finished-at="2025-07-07T11:06:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetAllUsers_ShouldReturnUserList status=SUCCESS method=GetUserTests.testGetAllUsers_ShouldReturnUserList()[pri:0, instance:com.api.tests.GetUserTests@1ca25c47] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GetUserTests@1ca25c47]" started-at="2025-07-07T11:06:39 IST" name="logTestStart" finished-at="2025-07-07T11:06:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GetUserTests.testGetSingleUser_InvalidId_ShouldReturn404()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testGetSingleUser_InvalidId_ShouldReturn404()[pri:0, instance:com.api.tests.GetUserTests@1ca25c47]" started-at="2025-07-07T11:06:39 IST" name="testGetSingleUser_InvalidId_ShouldReturn404" description="🔴 Fetch single user by invalid ID - Should return 404 Not Found" finished-at="2025-07-07T11:06:40 IST" duration-ms="518" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSingleUser_InvalidId_ShouldReturn404 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.GetUserTests@1ca25c47]" started-at="2025-07-07T11:06:40 IST" name="logTestResult" finished-at="2025-07-07T11:06:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetSingleUser_InvalidId_ShouldReturn404 status=SUCCESS method=GetUserTests.testGetSingleUser_InvalidId_ShouldReturn404()[pri:0, instance:com.api.tests.GetUserTests@1ca25c47] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GetUserTests@1ca25c47]" started-at="2025-07-07T11:06:40 IST" name="logTestStart" finished-at="2025-07-07T11:06:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GetUserTests.testGetSingleUser_ValidId_ShouldReturnUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testGetSingleUser_ValidId_ShouldReturnUser()[pri:0, instance:com.api.tests.GetUserTests@1ca25c47]" started-at="2025-07-07T11:06:40 IST" name="testGetSingleUser_ValidId_ShouldReturnUser" description="🟢 Fetch single user by valid ID - Should return 200 and user details" finished-at="2025-07-07T11:06:40 IST" duration-ms="882" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSingleUser_ValidId_ShouldReturnUser -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.GetUserTests@1ca25c47]" started-at="2025-07-07T11:06:40 IST" name="logTestResult" finished-at="2025-07-07T11:06:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetSingleUser_ValidId_ShouldReturnUser status=SUCCESS method=GetUserTests.testGetSingleUser_ValidId_ShouldReturnUser()[pri:0, instance:com.api.tests.GetUserTests@1ca25c47] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
      </class> <!-- com.api.tests.GetUserTests -->
      <class name="com.api.tests.CreateCommentTests">
        <test-method is-config="true" signature="setup()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:09 IST" name="setup" finished-at="2025-07-07T11:07:11 IST" duration-ms="1683" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:11 IST" name="logTestStart" finished-at="2025-07-07T11:07:11 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CreateCommentTests.testCreateComment_InvalidEmail_ShouldReturn422()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testCreateComment_InvalidEmail_ShouldReturn422()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:11 IST" name="testCreateComment_InvalidEmail_ShouldReturn422" description="🔴 Invalid email format should return 422" finished-at="2025-07-07T11:07:12 IST" duration-ms="983" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateComment_InvalidEmail_ShouldReturn422 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:12 IST" name="logTestResult" finished-at="2025-07-07T11:07:12 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCreateComment_InvalidEmail_ShouldReturn422 status=SUCCESS method=CreateCommentTests.testCreateComment_InvalidEmail_ShouldReturn422()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:12 IST" name="logTestStart" finished-at="2025-07-07T11:07:12 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CreateCommentTests.testCreateComment_InvalidPostId_ShouldReturn422()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testCreateComment_InvalidPostId_ShouldReturn422()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:12 IST" name="testCreateComment_InvalidPostId_ShouldReturn422" description="🔴 Invalid Post ID should return 422" finished-at="2025-07-07T11:07:12 IST" duration-ms="341" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateComment_InvalidPostId_ShouldReturn422 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:12 IST" name="logTestResult" finished-at="2025-07-07T11:07:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCreateComment_InvalidPostId_ShouldReturn422 status=SUCCESS method=CreateCommentTests.testCreateComment_InvalidPostId_ShouldReturn422()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:12 IST" name="logTestStart" finished-at="2025-07-07T11:07:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CreateCommentTests.testCreateComment_MissingBody_ShouldReturn422()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testCreateComment_MissingBody_ShouldReturn422()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:12 IST" name="testCreateComment_MissingBody_ShouldReturn422" description="🔴 Missing body should return 422" finished-at="2025-07-07T11:07:13 IST" duration-ms="894" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateComment_MissingBody_ShouldReturn422 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:13 IST" name="logTestResult" finished-at="2025-07-07T11:07:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCreateComment_MissingBody_ShouldReturn422 status=SUCCESS method=CreateCommentTests.testCreateComment_MissingBody_ShouldReturn422()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:13 IST" name="logTestStart" finished-at="2025-07-07T11:07:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CreateCommentTests.testCreateComment_MissingEmail_ShouldReturn422()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testCreateComment_MissingEmail_ShouldReturn422()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:13 IST" name="testCreateComment_MissingEmail_ShouldReturn422" description="🔴 Missing email should return 422" finished-at="2025-07-07T11:07:14 IST" duration-ms="693" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateComment_MissingEmail_ShouldReturn422 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:14 IST" name="logTestResult" finished-at="2025-07-07T11:07:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCreateComment_MissingEmail_ShouldReturn422 status=SUCCESS method=CreateCommentTests.testCreateComment_MissingEmail_ShouldReturn422()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:14 IST" name="logTestStart" finished-at="2025-07-07T11:07:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CreateCommentTests.testCreateComment_MissingName_ShouldReturn422()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testCreateComment_MissingName_ShouldReturn422()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:14 IST" name="testCreateComment_MissingName_ShouldReturn422" description="🔴 Missing name should return 422" finished-at="2025-07-07T11:07:15 IST" duration-ms="727" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateComment_MissingName_ShouldReturn422 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:15 IST" name="logTestResult" finished-at="2025-07-07T11:07:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCreateComment_MissingName_ShouldReturn422 status=SUCCESS method=CreateCommentTests.testCreateComment_MissingName_ShouldReturn422()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:15 IST" name="logTestStart" finished-at="2025-07-07T11:07:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CreateCommentTests.testCreateComment_ShouldSucceed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testCreateComment_ShouldSucceed()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:15 IST" name="testCreateComment_ShouldSucceed" description="🟢 Add comment to a post" finished-at="2025-07-07T11:07:15 IST" duration-ms="798" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateComment_ShouldSucceed -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df]" started-at="2025-07-07T11:07:15 IST" name="logTestResult" finished-at="2025-07-07T11:07:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCreateComment_ShouldSucceed status=SUCCESS method=CreateCommentTests.testCreateComment_ShouldSucceed()[pri:0, instance:com.api.tests.CreateCommentTests@5b6813df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
      </class> <!-- com.api.tests.CreateCommentTests -->
      <class name="com.api.tests.UpdateCommentTests">
        <test-method is-config="true" signature="setup()[pri:0, instance:com.api.tests.UpdateCommentTests@2b58f754]" started-at="2025-07-07T11:07:19 IST" name="setup" finished-at="2025-07-07T11:07:22 IST" duration-ms="3178" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.UpdateCommentTests@2b58f754]" started-at="2025-07-07T11:07:22 IST" name="logTestStart" finished-at="2025-07-07T11:07:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.UpdateCommentTests.testUpdateComment_ShouldSucceed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testUpdateComment_ShouldSucceed()[pri:0, instance:com.api.tests.UpdateCommentTests@2b58f754]" started-at="2025-07-07T11:07:22 IST" name="testUpdateComment_ShouldSucceed" description="🟢 Update a comment successfully" finished-at="2025-07-07T11:07:23 IST" duration-ms="792" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateComment_ShouldSucceed -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.UpdateCommentTests@2b58f754]" started-at="2025-07-07T11:07:23 IST" name="logTestResult" finished-at="2025-07-07T11:07:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testUpdateComment_ShouldSucceed status=SUCCESS method=UpdateCommentTests.testUpdateComment_ShouldSucceed()[pri:0, instance:com.api.tests.UpdateCommentTests@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
      </class> <!-- com.api.tests.UpdateCommentTests -->
      <class name="com.api.tests.UpdatePostTests">
        <test-method is-config="true" signature="setup()[pri:0, instance:com.api.tests.UpdatePostTests@6865c751]" started-at="2025-07-07T11:06:59 IST" name="setup" finished-at="2025-07-07T11:07:01 IST" duration-ms="1763" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.UpdatePostTests@6865c751]" started-at="2025-07-07T11:07:01 IST" name="logTestStart" finished-at="2025-07-07T11:07:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.UpdatePostTests.testUpdatePostWithEmptyPayload_ShouldReturn422()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testUpdatePostWithEmptyPayload_ShouldReturn422()[pri:0, instance:com.api.tests.UpdatePostTests@6865c751]" started-at="2025-07-07T11:07:01 IST" name="testUpdatePostWithEmptyPayload_ShouldReturn422" description="🔴 Update post with empty payload should return 422" finished-at="2025-07-07T11:07:01 IST" duration-ms="589" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdatePostWithEmptyPayload_ShouldReturn422 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.UpdatePostTests@6865c751]" started-at="2025-07-07T11:07:01 IST" name="logTestResult" finished-at="2025-07-07T11:07:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testUpdatePostWithEmptyPayload_ShouldReturn422 status=SUCCESS method=UpdatePostTests.testUpdatePostWithEmptyPayload_ShouldReturn422()[pri:0, instance:com.api.tests.UpdatePostTests@6865c751] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.UpdatePostTests@6865c751]" started-at="2025-07-07T11:07:01 IST" name="logTestStart" finished-at="2025-07-07T11:07:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.UpdatePostTests.testUpdatePostWithInvalidId_ShouldReturn404()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testUpdatePostWithInvalidId_ShouldReturn404()[pri:0, instance:com.api.tests.UpdatePostTests@6865c751]" started-at="2025-07-07T11:07:01 IST" name="testUpdatePostWithInvalidId_ShouldReturn404" description="🔴 Update with invalid post ID should return 404" finished-at="2025-07-07T11:07:01 IST" duration-ms="325" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdatePostWithInvalidId_ShouldReturn404 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.UpdatePostTests@6865c751]" started-at="2025-07-07T11:07:01 IST" name="logTestResult" finished-at="2025-07-07T11:07:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testUpdatePostWithInvalidId_ShouldReturn404 status=SUCCESS method=UpdatePostTests.testUpdatePostWithInvalidId_ShouldReturn404()[pri:0, instance:com.api.tests.UpdatePostTests@6865c751] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.UpdatePostTests@6865c751]" started-at="2025-07-07T11:07:01 IST" name="logTestStart" finished-at="2025-07-07T11:07:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.UpdatePostTests.testUpdatePostWithoutAuthToken_ShouldReturn401or404()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testUpdatePostWithoutAuthToken_ShouldReturn401or404()[pri:0, instance:com.api.tests.UpdatePostTests@6865c751]" started-at="2025-07-07T11:07:01 IST" name="testUpdatePostWithoutAuthToken_ShouldReturn401or404" description="🔴 Update post without auth token should return 401 or 404" finished-at="2025-07-07T11:07:02 IST" duration-ms="916" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdatePostWithoutAuthToken_ShouldReturn401or404 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.UpdatePostTests@6865c751]" started-at="2025-07-07T11:07:02 IST" name="logTestResult" finished-at="2025-07-07T11:07:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testUpdatePostWithoutAuthToken_ShouldReturn401or404 status=SUCCESS method=UpdatePostTests.testUpdatePostWithoutAuthToken_ShouldReturn401or404()[pri:0, instance:com.api.tests.UpdatePostTests@6865c751] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.UpdatePostTests@6865c751]" started-at="2025-07-07T11:07:02 IST" name="logTestStart" finished-at="2025-07-07T11:07:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.UpdatePostTests.testUpdatePost_ShouldSucceed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testUpdatePost_ShouldSucceed()[pri:0, instance:com.api.tests.UpdatePostTests@6865c751]" started-at="2025-07-07T11:07:02 IST" name="testUpdatePost_ShouldSucceed" description="🟢 Update post title and body" finished-at="2025-07-07T11:07:03 IST" duration-ms="1003" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdatePost_ShouldSucceed -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.UpdatePostTests@6865c751]" started-at="2025-07-07T11:07:03 IST" name="logTestResult" finished-at="2025-07-07T11:07:03 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testUpdatePost_ShouldSucceed status=SUCCESS method=UpdatePostTests.testUpdatePost_ShouldSucceed()[pri:0, instance:com.api.tests.UpdatePostTests@6865c751] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
      </class> <!-- com.api.tests.UpdatePostTests -->
      <class name="com.api.tests.DeleteUserTests">
        <test-method is-config="true" signature="setup()[pri:0, instance:com.api.tests.DeleteUserTests@533b266e]" started-at="2025-07-07T11:06:47 IST" name="setup" finished-at="2025-07-07T11:06:47 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.DeleteUserTests@533b266e]" started-at="2025-07-07T11:06:47 IST" name="logTestStart" finished-at="2025-07-07T11:06:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.DeleteUserTests.testDeleteUser_InvalidId_ShouldReturn404()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testDeleteUser_InvalidId_ShouldReturn404()[pri:0, instance:com.api.tests.DeleteUserTests@533b266e]" started-at="2025-07-07T11:06:47 IST" name="testDeleteUser_InvalidId_ShouldReturn404" description="🔴 Delete non-existent user - Should return 404" finished-at="2025-07-07T11:06:48 IST" duration-ms="767" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeleteUser_InvalidId_ShouldReturn404 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.DeleteUserTests@533b266e]" started-at="2025-07-07T11:06:48 IST" name="logTestResult" finished-at="2025-07-07T11:06:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testDeleteUser_InvalidId_ShouldReturn404 status=SUCCESS method=DeleteUserTests.testDeleteUser_InvalidId_ShouldReturn404()[pri:0, instance:com.api.tests.DeleteUserTests@533b266e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.DeleteUserTests@533b266e]" started-at="2025-07-07T11:06:48 IST" name="logTestStart" finished-at="2025-07-07T11:06:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.DeleteUserTests.testDeleteUser_Twice_ShouldReturn404OnSecondAttempt()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testDeleteUser_Twice_ShouldReturn404OnSecondAttempt()[pri:0, instance:com.api.tests.DeleteUserTests@533b266e]" started-at="2025-07-07T11:06:48 IST" name="testDeleteUser_Twice_ShouldReturn404OnSecondAttempt" description="🔴 Delete same user twice - Second attempt should return 404" finished-at="2025-07-07T11:06:52 IST" duration-ms="4841" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeleteUser_Twice_ShouldReturn404OnSecondAttempt -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.DeleteUserTests@533b266e]" started-at="2025-07-07T11:06:52 IST" name="logTestResult" finished-at="2025-07-07T11:06:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testDeleteUser_Twice_ShouldReturn404OnSecondAttempt status=SUCCESS method=DeleteUserTests.testDeleteUser_Twice_ShouldReturn404OnSecondAttempt()[pri:0, instance:com.api.tests.DeleteUserTests@533b266e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.DeleteUserTests@533b266e]" started-at="2025-07-07T11:06:52 IST" name="logTestStart" finished-at="2025-07-07T11:06:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.DeleteUserTests.testDeleteUser_ValidId_ShouldSucceed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testDeleteUser_ValidId_ShouldSucceed()[pri:0, instance:com.api.tests.DeleteUserTests@533b266e]" started-at="2025-07-07T11:06:52 IST" name="testDeleteUser_ValidId_ShouldSucceed" description="🟢 Delete existing user - Should return 204" finished-at="2025-07-07T11:06:53 IST" duration-ms="952" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeleteUser_ValidId_ShouldSucceed -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.DeleteUserTests@533b266e]" started-at="2025-07-07T11:06:53 IST" name="logTestResult" finished-at="2025-07-07T11:06:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testDeleteUser_ValidId_ShouldSucceed status=SUCCESS method=DeleteUserTests.testDeleteUser_ValidId_ShouldSucceed()[pri:0, instance:com.api.tests.DeleteUserTests@533b266e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
      </class> <!-- com.api.tests.DeleteUserTests -->
      <class name="com.api.tests.GetCommentTests">
        <test-method is-config="true" signature="setup()[pri:0, instance:com.api.tests.GetCommentTests@5f2606b]" started-at="2025-07-07T11:07:15 IST" name="setup" finished-at="2025-07-07T11:07:17 IST" duration-ms="1886" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GetCommentTests@5f2606b]" started-at="2025-07-07T11:07:17 IST" name="logTestStart" finished-at="2025-07-07T11:07:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GetCommentTests.testGetAllCommentsForPost_ShouldReturnList()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testGetAllCommentsForPost_ShouldReturnList()[pri:0, instance:com.api.tests.GetCommentTests@5f2606b]" started-at="2025-07-07T11:07:17 IST" name="testGetAllCommentsForPost_ShouldReturnList" description="🟢 Get all comments for a post" finished-at="2025-07-07T11:07:18 IST" duration-ms="356" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllCommentsForPost_ShouldReturnList -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.GetCommentTests@5f2606b]" started-at="2025-07-07T11:07:18 IST" name="logTestResult" finished-at="2025-07-07T11:07:18 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetAllCommentsForPost_ShouldReturnList status=SUCCESS method=GetCommentTests.testGetAllCommentsForPost_ShouldReturnList()[pri:0, instance:com.api.tests.GetCommentTests@5f2606b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method signature="testGetCommentById_ShouldReturnCorrectComment()[pri:0, instance:com.api.tests.GetCommentTests@5f2606b]" started-at="2025-07-07T11:07:18 IST" name="testGetCommentById_ShouldReturnCorrectComment" description="🟢 Get specific comment by ID" finished-at="2025-07-07T11:07:19 IST" duration-ms="960" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetCommentById_ShouldReturnCorrectComment -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GetCommentTests@5f2606b]" started-at="2025-07-07T11:07:18 IST" name="logTestStart" finished-at="2025-07-07T11:07:18 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GetCommentTests.testGetCommentById_ShouldReturnCorrectComment()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.GetCommentTests@5f2606b]" started-at="2025-07-07T11:07:19 IST" name="logTestResult" finished-at="2025-07-07T11:07:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetCommentById_ShouldReturnCorrectComment status=SUCCESS method=GetCommentTests.testGetCommentById_ShouldReturnCorrectComment()[pri:0, instance:com.api.tests.GetCommentTests@5f2606b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GetCommentTests@5f2606b]" started-at="2025-07-07T11:07:19 IST" name="logTestStart" finished-at="2025-07-07T11:07:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GetCommentTests.testGetCommentByInvalidId_ShouldReturn404()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testGetCommentByInvalidId_ShouldReturn404()[pri:0, instance:com.api.tests.GetCommentTests@5f2606b]" started-at="2025-07-07T11:07:19 IST" name="testGetCommentByInvalidId_ShouldReturn404" description="🔴 Get comment with invalid ID should return 404" finished-at="2025-07-07T11:07:19 IST" duration-ms="597" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetCommentByInvalidId_ShouldReturn404 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.GetCommentTests@5f2606b]" started-at="2025-07-07T11:07:19 IST" name="logTestResult" finished-at="2025-07-07T11:07:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetCommentByInvalidId_ShouldReturn404 status=SUCCESS method=GetCommentTests.testGetCommentByInvalidId_ShouldReturn404()[pri:0, instance:com.api.tests.GetCommentTests@5f2606b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
      </class> <!-- com.api.tests.GetCommentTests -->
    </test> <!-- 🔍 All CRUD API Tests (Create + Get + Update + Delete) -->
    <test started-at="2025-07-07T11:07:28 IST" name="🔐 Auth and Security Tests" finished-at="2025-07-07T11:07:29 IST" duration-ms="1141">
      <class name="com.api.tests.security.AuthTokenNegativeTests">
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.security.AuthTokenNegativeTests@6b5176f2]" started-at="2025-07-07T11:07:28 IST" name="logTestStart" finished-at="2025-07-07T11:07:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.security.AuthTokenNegativeTests.testInvalidToken_ShouldReturn401()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testInvalidToken_ShouldReturn401()[pri:0, instance:com.api.tests.security.AuthTokenNegativeTests@6b5176f2]" started-at="2025-07-07T11:07:28 IST" name="testInvalidToken_ShouldReturn401" description="🔴 Invalid token - should return 401 Unauthorized" finished-at="2025-07-07T11:07:29 IST" duration-ms="619" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidToken_ShouldReturn401 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.security.AuthTokenNegativeTests@6b5176f2]" started-at="2025-07-07T11:07:29 IST" name="logTestResult" finished-at="2025-07-07T11:07:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidToken_ShouldReturn401 status=SUCCESS method=AuthTokenNegativeTests.testInvalidToken_ShouldReturn401()[pri:0, instance:com.api.tests.security.AuthTokenNegativeTests@6b5176f2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:com.api.tests.security.AuthTokenNegativeTests@6b5176f2]" started-at="2025-07-07T11:07:29 IST" name="logTestStart" finished-at="2025-07-07T11:07:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.security.AuthTokenNegativeTests.testMissingToken_ShouldReturn401()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testMissingToken_ShouldReturn401()[pri:0, instance:com.api.tests.security.AuthTokenNegativeTests@6b5176f2]" started-at="2025-07-07T11:07:29 IST" name="testMissingToken_ShouldReturn401" description="🔴 Missing token - should return 401 or 404" finished-at="2025-07-07T11:07:29 IST" duration-ms="511" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMissingToken_ShouldReturn401 -->
        <test-method is-config="true" signature="logTestResult(org.testng.ITestResult)[pri:0, instance:com.api.tests.security.AuthTokenNegativeTests@6b5176f2]" started-at="2025-07-07T11:07:29 IST" name="logTestResult" finished-at="2025-07-07T11:07:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testMissingToken_ShouldReturn401 status=SUCCESS method=AuthTokenNegativeTests.testMissingToken_ShouldReturn401()[pri:0, instance:com.api.tests.security.AuthTokenNegativeTests@6b5176f2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestResult -->
      </class> <!-- com.api.tests.security.AuthTokenNegativeTests -->
    </test> <!-- 🔐 Auth and Security Tests -->
  </suite> <!-- API Automation Test Suite -->
</testng-results>
